"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Entity = void 0;
const app = require("..");
class Entity {
    constructor(address, members, options) {
        this.address = address;
        this.members = convertMembers(members);
        this.options = options;
    }
    receive(packet) {
        if (packet instanceof app.EntityUpdateEntity) {
            this.receiveUpdate(packet);
        }
        else {
            this.receiveSync(packet);
        }
    }
    update(id, syncId) {
        const packets = [];
        this.createUpdate(packets, syncId);
        return packets.length ? new app.EntityChange(id, packets) : undefined;
    }
    createUpdate(packets, syncId) {
        for (const member of this.members.values()) {
            const packet = member.update(syncId);
            if (!packet)
                continue;
            packets.push(packet);
        }
    }
    receiveUpdate(packet) {
        for (const child of packet.members) {
            const member = this.members.get(child.offset);
            if (!member)
                continue;
            member.receive(child);
        }
    }
    receiveSync(packet) {
        for (const member of this.members.values()) {
            member.receive(packet);
        }
    }
}
exports.Entity = Entity;
function convertMembers(members) {
    const result = new Map();
    for (const member of members)
        result.set(member.source.offset, member.source);
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW50aXR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9hcGkvY2xhc3Nlcy9FbnRpdHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMEJBQTBCO0FBRTFCLE1BQWEsTUFBTTtJQUtqQixZQUFZLE9BQWUsRUFBRSxPQUFnRCxFQUFFLE9BQWtCO1FBQy9GLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxPQUFPLENBQUMsTUFBOEM7UUFDcEQsSUFBSSxNQUFNLFlBQVksR0FBRyxDQUFDLGtCQUFrQixFQUFFO1lBQzVDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDNUI7YUFBTTtZQUNMLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRUQsTUFBTSxDQUFDLEVBQVUsRUFBRSxNQUFjO1FBQy9CLE1BQU0sT0FBTyxHQUFrQyxFQUFFLENBQUM7UUFDbEQsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbkMsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDeEUsQ0FBQztJQUVPLFlBQVksQ0FBQyxPQUFzQyxFQUFFLE1BQWM7UUFDekUsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQzFDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDckMsSUFBSSxDQUFDLE1BQU07Z0JBQUUsU0FBUztZQUN0QixPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQztJQUVPLGFBQWEsQ0FBQyxNQUE4QjtRQUNsRCxLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sQ0FBQyxPQUFPLEVBQUU7WUFDbEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzlDLElBQUksQ0FBQyxNQUFNO2dCQUFFLFNBQVM7WUFDdEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN2QjtJQUNILENBQUM7SUFFTyxXQUFXLENBQUMsTUFBcUI7UUFDdkMsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFO1lBQzFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7SUFDSCxDQUFDO0NBQ0Y7QUE5Q0Qsd0JBOENDO0FBRUQsU0FBUyxjQUFjLENBQUMsT0FBZ0Q7SUFDdEUsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQTRCLENBQUM7SUFDbkQsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPO1FBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDOUUsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFwcCBmcm9tICcuLic7XG5cbmV4cG9ydCBjbGFzcyBFbnRpdHkge1xuICByZWFkb25seSBhZGRyZXNzOiBiaWdpbnQ7XG4gIHJlYWRvbmx5IG1lbWJlcnM6IE1hcDxudW1iZXIsIGFwcC5FbnRpdHlNZW1iZXI+O1xuICByZWFkb25seSBvcHRpb25zPzogSU9wdGlvbnM7XG5cbiAgY29uc3RydWN0b3IoYWRkcmVzczogYmlnaW50LCBtZW1iZXJzOiBJdGVyYWJsZTxhcHAuQWRhcHRlcjxhcHAuRW50aXR5TWVtYmVyPj4sIG9wdGlvbnM/OiBJT3B0aW9ucykge1xuICAgIHRoaXMuYWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgdGhpcy5tZW1iZXJzID0gY29udmVydE1lbWJlcnMobWVtYmVycyk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIHJlY2VpdmUocGFja2V0OiBhcHAuQmFzaWNTeW5jIHwgYXBwLkVudGl0eVVwZGF0ZUVudGl0eSkge1xuICAgIGlmIChwYWNrZXQgaW5zdGFuY2VvZiBhcHAuRW50aXR5VXBkYXRlRW50aXR5KSB7XG4gICAgICB0aGlzLnJlY2VpdmVVcGRhdGUocGFja2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZWNlaXZlU3luYyhwYWNrZXQpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZShpZDogbnVtYmVyLCBzeW5jSWQ6IG51bWJlcikge1xuICAgIGNvbnN0IHBhY2tldHM6IEFycmF5PGFwcC5FbnRpdHlDaGFuZ2VNZW1iZXI+ID0gW107XG4gICAgdGhpcy5jcmVhdGVVcGRhdGUocGFja2V0cywgc3luY0lkKTtcbiAgICByZXR1cm4gcGFja2V0cy5sZW5ndGggPyBuZXcgYXBwLkVudGl0eUNoYW5nZShpZCwgcGFja2V0cykgOiB1bmRlZmluZWQ7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZVVwZGF0ZShwYWNrZXRzOiBBcnJheTxhcHAuRW50aXR5Q2hhbmdlTWVtYmVyPiwgc3luY0lkOiBudW1iZXIpIHtcbiAgICBmb3IgKGNvbnN0IG1lbWJlciBvZiB0aGlzLm1lbWJlcnMudmFsdWVzKCkpIHtcbiAgICAgIGNvbnN0IHBhY2tldCA9IG1lbWJlci51cGRhdGUoc3luY0lkKTtcbiAgICAgIGlmICghcGFja2V0KSBjb250aW51ZTtcbiAgICAgIHBhY2tldHMucHVzaChwYWNrZXQpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcmVjZWl2ZVVwZGF0ZShwYWNrZXQ6IGFwcC5FbnRpdHlVcGRhdGVFbnRpdHkpIHtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHBhY2tldC5tZW1iZXJzKSB7XG4gICAgICBjb25zdCBtZW1iZXIgPSB0aGlzLm1lbWJlcnMuZ2V0KGNoaWxkLm9mZnNldCk7XG4gICAgICBpZiAoIW1lbWJlcikgY29udGludWU7XG4gICAgICBtZW1iZXIucmVjZWl2ZShjaGlsZCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZWNlaXZlU3luYyhwYWNrZXQ6IGFwcC5CYXNpY1N5bmMpIHtcbiAgICBmb3IgKGNvbnN0IG1lbWJlciBvZiB0aGlzLm1lbWJlcnMudmFsdWVzKCkpIHtcbiAgICAgIG1lbWJlci5yZWNlaXZlKHBhY2tldCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRNZW1iZXJzKG1lbWJlcnM6IEl0ZXJhYmxlPGFwcC5BZGFwdGVyPGFwcC5FbnRpdHlNZW1iZXI+Pikge1xuICBjb25zdCByZXN1bHQgPSBuZXcgTWFwPG51bWJlciwgYXBwLkVudGl0eU1lbWJlcj4oKTtcbiAgZm9yIChjb25zdCBtZW1iZXIgb2YgbWVtYmVycykgcmVzdWx0LnNldChtZW1iZXIuc291cmNlLm9mZnNldCwgbWVtYmVyLnNvdXJjZSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbnR5cGUgSU9wdGlvbnMgPSB7XG4gIGVuYWJsZVVwZGF0ZT86IGJvb2xlYW47XG4gIHJlcXVlc3RCYXRjaD86IGJvb2xlYW47XG59XG4iXX0=