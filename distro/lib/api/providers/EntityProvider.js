"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntityProvider = void 0;
const app = require("..");
class EntityProvider {
    constructor() {
        this.createEntities = new Map();
        this.deleteEntities = new Map();
        this.livingEntities = new Map();
        this.lookupEntities = new Map();
        this.releasedIds = [];
        this.nextId = 0;
    }
    create(entity) {
        const id = this.releasedIds.pop();
        if (typeof id !== 'undefined') {
            this.createEntities.set(id, entity);
            this.lookupEntities.set(entity, id);
        }
        else {
            const id = this.nextId;
            this.createEntities.set(id, entity);
            this.lookupEntities.set(entity, id);
            this.nextId++;
        }
    }
    delete(entity) {
        const id = this.lookupEntities.get(entity);
        if (typeof id === 'undefined') {
            throw new Error();
        }
        else if (this.createEntities.has(id)) {
            this.createEntities.delete(id);
            this.lookupEntities.delete(entity);
        }
        else if (this.livingEntities.has(id)) {
            this.deleteEntities.set(id, entity);
            this.livingEntities.delete(id);
            this.lookupEntities.delete(entity);
        }
    }
    receive(packet) {
        if (packet instanceof app.EntityUpdate) {
            this.receiveUpdate(packet);
        }
        else {
            this.receiveSync(packet);
        }
    }
    update(stream, syncId) {
        for (const id of this.deleteEntities.keys()) {
            const packet = new app.EntityDelete(id);
            this.deleteEntities.delete(id);
            this.releasedIds.push(id);
            packet.write(stream);
        }
        for (const [id, entity] of this.createEntities) {
            const packet = new app.EntityCreate(id, entity.address, convertMembers(entity.members), Boolean(entity.options?.requestBatch));
            this.createEntities.delete(id);
            this.livingEntities.set(id, entity);
            packet.write(stream);
        }
        for (const [id, entity] of this.livingEntities) {
            if (!entity.options || !entity.options.enableUpdate)
                continue;
            const packet = entity.update(id, syncId);
            if (!packet)
                continue;
            packet.write(stream);
        }
    }
    receiveUpdate(packet) {
        for (const child of packet.entities) {
            const entity = this.livingEntities.get(child.id);
            if (!entity)
                continue;
            entity.receive(child);
        }
    }
    receiveSync(packet) {
        for (const entity of this.livingEntities.values()) {
            if (!entity.options || !entity.options.enableUpdate)
                continue;
            entity.receive(packet);
        }
    }
}
exports.EntityProvider = EntityProvider;
function convertMembers(members) {
    const result = [];
    for (const [id, member] of members)
        result.push(new app.EntityCreateMember(id, member.interval, member.buffer.byteLength));
    return result;
}
//# sourceMappingURL=data:application/json;base64,