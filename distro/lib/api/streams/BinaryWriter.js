"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BinaryWriter = void 0;
class BinaryWriter {
    constructor() {
        this.buffer = new DataView(new ArrayBuffer(1024));
        this.offset = 0;
    }
    hasBytes() {
        return Boolean(this.offset);
    }
    writeBytes(value) {
        for (let i = 0; i < value.byteLength; i++) {
            this.writeUInt8(value.getUint8(i));
        }
    }
    writeUInt8(value) {
        this.prepare(1);
        this.buffer.setUint8(this.offset, value);
        this.offset += 1;
    }
    writeUInt64(value) {
        this.prepare(8);
        this.buffer.setBigUint64(this.offset, value, true);
        this.offset += 8;
    }
    writeVariableLength(value) {
        let more = true;
        while (more) {
            let chunk = value & 0x7F;
            value >>= 7;
            more = value != 0;
            chunk |= more ? 0x80 : 0;
            this.writeUInt8(chunk);
        }
    }
    toBuffer() {
        return new DataView(this.buffer.buffer, 0, this.offset);
    }
    prepare(count) {
        while (this.offset + count > this.buffer.byteLength) {
            const result = new DataView(new ArrayBuffer(this.buffer.byteLength * 2));
            for (let i = 0; i < this.offset; i++)
                result.setUint8(i, this.buffer.getUint8(i));
            this.buffer = result;
        }
    }
}
exports.BinaryWriter = BinaryWriter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmluYXJ5V3JpdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9hcGkvc3RyZWFtcy9CaW5hcnlXcml0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsTUFBYSxZQUFZO0lBSXZCO1FBQ0UsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLFFBQVEsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2xELElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2xCLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRCxVQUFVLENBQUMsS0FBZTtRQUN4QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN6QyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwQztJQUNILENBQUM7SUFFRCxVQUFVLENBQUMsS0FBYTtRQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hCLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDekMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUM7SUFDbkIsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUFhO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUM7SUFDbkIsQ0FBQztJQUVELG1CQUFtQixDQUFDLEtBQWE7UUFDL0IsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLE9BQU8sSUFBSSxFQUFFO1lBQ1gsSUFBSSxLQUFLLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQztZQUN6QixLQUFLLEtBQUssQ0FBQyxDQUFDO1lBQ1osSUFBSSxHQUFHLEtBQUssSUFBSSxDQUFDLENBQUM7WUFDbEIsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN4QjtJQUNILENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFTyxPQUFPLENBQUMsS0FBYTtRQUMzQixPQUFPLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFO1lBQ25ELE1BQU0sTUFBTSxHQUFHLElBQUksUUFBUSxDQUFDLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFO2dCQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEYsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7U0FDdEI7SUFDSCxDQUFDO0NBQ0Y7QUFyREQsb0NBcURDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIEJpbmFyeVdyaXRlciB7XG4gIHByaXZhdGUgYnVmZmVyOiBEYXRhVmlldztcbiAgcHJpdmF0ZSBvZmZzZXQ6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmJ1ZmZlciA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMTAyNCkpO1xuICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgfVxuXG4gIGhhc0J5dGVzKCkge1xuICAgIHJldHVybiBCb29sZWFuKHRoaXMub2Zmc2V0KTtcbiAgfVxuXG4gIHdyaXRlQnl0ZXModmFsdWU6IERhdGFWaWV3KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5ieXRlTGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMud3JpdGVVSW50OCh2YWx1ZS5nZXRVaW50OChpKSk7XG4gICAgfVxuICB9XG5cbiAgd3JpdGVVSW50OCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5wcmVwYXJlKDEpO1xuICAgIHRoaXMuYnVmZmVyLnNldFVpbnQ4KHRoaXMub2Zmc2V0LCB2YWx1ZSk7XG4gICAgdGhpcy5vZmZzZXQgKz0gMTtcbiAgfVxuXG4gIHdyaXRlVUludDY0KHZhbHVlOiBiaWdpbnQpIHtcbiAgICB0aGlzLnByZXBhcmUoOCk7XG4gICAgdGhpcy5idWZmZXIuc2V0QmlnVWludDY0KHRoaXMub2Zmc2V0LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgdGhpcy5vZmZzZXQgKz0gODtcbiAgfVxuICBcbiAgd3JpdGVWYXJpYWJsZUxlbmd0aCh2YWx1ZTogbnVtYmVyKSB7XG4gICAgbGV0IG1vcmUgPSB0cnVlO1xuICAgIHdoaWxlIChtb3JlKSB7XG4gICAgICBsZXQgY2h1bmsgPSB2YWx1ZSAmIDB4N0Y7XG4gICAgICB2YWx1ZSA+Pj0gNztcbiAgICAgIG1vcmUgPSB2YWx1ZSAhPSAwO1xuICAgICAgY2h1bmsgfD0gbW9yZSA/IDB4ODAgOiAwO1xuICAgICAgdGhpcy53cml0ZVVJbnQ4KGNodW5rKTtcbiAgICB9XG4gIH1cbiAgXG4gIHRvQnVmZmVyKCkge1xuICAgIHJldHVybiBuZXcgRGF0YVZpZXcodGhpcy5idWZmZXIuYnVmZmVyLCAwLCB0aGlzLm9mZnNldCk7XG4gIH1cblxuICBwcml2YXRlIHByZXBhcmUoY291bnQ6IG51bWJlcikge1xuICAgIHdoaWxlICh0aGlzLm9mZnNldCArIGNvdW50ID4gdGhpcy5idWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcih0aGlzLmJ1ZmZlci5ieXRlTGVuZ3RoICogMikpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm9mZnNldDsgaSsrKSByZXN1bHQuc2V0VWludDgoaSwgdGhpcy5idWZmZXIuZ2V0VWludDgoaSkpO1xuICAgICAgdGhpcy5idWZmZXIgPSByZXN1bHQ7XG4gICAgfVxuICB9XG59XG4iXX0=