"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Radar = void 0;
class Radar {
    constructor(canvas, maximumDistance = 200, numberOfRings = 8) {
        this.canvas = canvas;
        this.maximumDistance = maximumDistance;
        this.numberOfRings = numberOfRings;
        this.centerX = 0;
        this.centerY = 0;
        this.outerRadius = 0;
        this.context = canvas.getContext('2d');
    }
    refresh() {
        this.update();
        this.renderBackground();
        this.renderLines();
        this.renderRings();
    }
    renderItems(localPlayer, items, itemSet) {
        for (const item of items) {
            if (!itemSet.has(item.customScriptInt.value))
                continue;
            const position = this.calculatePosition(localPlayer, item.localOrigin);
            if (position) {
                this.context.beginPath();
                this.context.arc(position.x, position.y, this.outerRadius / 80, 0, Math.PI * 2);
                this.context.fillStyle = '#FFF';
                this.context.fill();
            }
        }
    }
    renderNpcs(localPlayer, npcs) {
        for (const npc of npcs) {
            const position = this.calculatePosition(localPlayer, npc.localOrigin);
            if (position) {
                this.context.beginPath();
                this.context.arc(position.x, position.y, this.outerRadius / 40, 0, Math.PI * 2);
                this.context.fillStyle = npc.createColor();
                this.context.fill();
            }
        }
    }
    renderPlayers(localPlayer, players) {
        for (const player of players) {
            if (!player.isValid || player === localPlayer)
                continue;
            const position = this.calculatePosition(localPlayer, player.localOrigin);
            if (position) {
                this.context.beginPath();
                this.context.arc(position.x, position.y, this.outerRadius / 40, 0, Math.PI * 2);
                this.context.fillStyle = player.createColor(localPlayer);
                this.context.fill();
            }
        }
    }
    calculatePosition(localPlayer, origin) {
        const dx = (localPlayer.localOrigin.value.x - origin.value.x) * 0.0254;
        const dy = (localPlayer.localOrigin.value.y - origin.value.y) * 0.0254;
        const r = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
        if (r < this.maximumDistance) {
            const s = this.outerRadius / this.maximumDistance;
            const a = Math.sign(dy) * Math.acos(dx / r) - localPlayer.viewAngle.value.y * Math.PI / 180;
            const x = this.centerX + Math.sin(a) * r * s;
            const y = this.centerY + Math.cos(a) * r * s;
            return { x, y };
        }
        else {
            return;
        }
    }
    renderBackground() {
        this.context.beginPath();
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.context.arc(this.centerX, this.centerY, this.outerRadius, 0, Math.PI * 2);
        this.context.fillStyle = '#000';
        this.context.fill();
    }
    renderLines() {
        this.context.strokeStyle = '#FFF';
        for (let i = 0; i < 8; i++) {
            const x = this.centerX + this.outerRadius * Math.cos(i * Math.PI * 0.25);
            const y = this.centerY + this.outerRadius * Math.sin(i * Math.PI * 0.25);
            this.context.beginPath();
            this.context.moveTo(this.centerX, this.centerY);
            this.context.lineTo(x, y);
            this.context.stroke();
        }
    }
    renderRings() {
        this.context.strokeStyle = '#FFF';
        for (let i = 1; i <= this.numberOfRings; i++) {
            this.context.beginPath();
            this.context.arc(this.centerX, this.centerY, this.outerRadius * i / this.numberOfRings, 0, Math.PI * 2);
            this.context.stroke();
        }
    }
    update() {
        this.centerX = this.canvas.width / 2;
        this.centerY = this.canvas.height / 2;
        this.outerRadius = (this.canvas.width > this.canvas.height ? this.canvas.height : this.canvas.width) / 2;
    }
}
exports.Radar = Radar;
//# sourceMappingURL=data:application/json;base64,