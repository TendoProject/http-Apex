"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sense = void 0;
const app = require(".");
class Sense {
    constructor(itemDefault = new app.core.GlowData(0, 110, 225, 25, true, false), itemHighlight = new app.core.GlowData(137, 108, 64, 0, true, false), maximumDistance = 200) {
        this.itemDefault = itemDefault;
        this.itemHighlight = itemHighlight;
        this.maximumDistance = maximumDistance;
    }
    resetItems(_, items) {
        for (const item of items) {
            if (item.highlightFunctionBits.value.isSame(this.itemHighlight)) {
                item.highlightFunctionBits.value = this.itemDefault;
            }
        }
    }
    resetPlayers(localPlayer, players) {
        for (const player of players) {
            if (player.isValid && !player.isSameTeam(localPlayer)) {
                if (this.inRange(localPlayer, player.localOrigin)) {
                    /* This could be a Bloodhound scan! */
                }
                else if (player.glowEnable.value === 7) {
                    player.glowEnable.value = 2;
                    player.glowThroughWalls.value = 5;
                }
            }
        }
    }
    updateItems(localPlayer, items, itemSet) {
        for (const item of items) {
            if (itemSet.has(item.customScriptInt.value) && this.inRange(localPlayer, item.localOrigin)) {
                item.highlightFunctionBits.value = this.itemHighlight;
            }
            else if (item.highlightFunctionBits.value.isSame(this.itemHighlight)) {
                item.highlightFunctionBits.value = this.itemDefault;
            }
        }
    }
    updatePlayers(localPlayer, players) {
        for (const player of players) {
            if (player.isValid && !player.isSameTeam(localPlayer)) {
                if (this.inRange(localPlayer, player.localOrigin)) {
                    player.glowEnable.value = 7;
                    player.glowThroughWalls.value = 2;
                }
                else if (player.glowEnable.value === 7) {
                    player.glowEnable.value = 2;
                    player.glowThroughWalls.value = 5;
                }
            }
        }
    }
    inRange(localPlayer, origin) {
        const dx = (localPlayer.localOrigin.value.x - origin.value.x) * 0.0254;
        const dy = (localPlayer.localOrigin.value.y - origin.value.y) * 0.0254;
        return Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2)) < this.maximumDistance;
    }
}
exports.Sense = Sense;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Vuc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2ZlYXR1cmVzL1NlbnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlCQUF5QjtBQUV6QixNQUFhLEtBQUs7SUFDaEIsWUFDbUIsY0FBYyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQ2pFLGdCQUFnQixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQ25FLGtCQUFrQixHQUFHO1FBRnJCLGdCQUFXLEdBQVgsV0FBVyxDQUFzRDtRQUNqRSxrQkFBYSxHQUFiLGFBQWEsQ0FBc0Q7UUFDbkUsb0JBQWUsR0FBZixlQUFlLENBQU07SUFBRyxDQUFDO0lBRTVDLFVBQVUsQ0FBQyxDQUFrQixFQUFFLEtBQThCO1FBQzNELEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxFQUFFO1lBQ3hCLElBQUksSUFBSSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFO2dCQUMvRCxJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7YUFDckQ7U0FDRjtJQUNILENBQUM7SUFFRCxZQUFZLENBQUMsV0FBNEIsRUFBRSxPQUFrQztRQUMzRSxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtZQUM1QixJQUFJLE1BQU0sQ0FBQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUNyRCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRTtvQkFDakQsc0NBQXNDO2lCQUN2QztxQkFBTSxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRTtvQkFDeEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO29CQUM1QixNQUFNLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztpQkFDbkM7YUFDRjtTQUNGO0lBQ0gsQ0FBQztJQUVELFdBQVcsQ0FBQyxXQUE0QixFQUFFLEtBQThCLEVBQUUsT0FBb0I7UUFDNUYsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7WUFDeEIsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFO2dCQUMxRixJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUM7YUFDdkQ7aUJBQU0sSUFBSSxJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUU7Z0JBQ3RFLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQzthQUNyRDtTQUNGO0lBQ0gsQ0FBQztJQUVELGFBQWEsQ0FBQyxXQUE0QixFQUFFLE9BQWtDO1FBQzVFLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1lBQzVCLElBQUksTUFBTSxDQUFDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEVBQUU7Z0JBQ3JELElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxFQUFFO29CQUNqRCxNQUFNLENBQUMsVUFBVSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7b0JBQzVCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO2lCQUNuQztxQkFBTSxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBSyxLQUFLLENBQUMsRUFBRTtvQkFDeEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO29CQUM1QixNQUFNLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztpQkFDbkM7YUFDRjtTQUNGO0lBQ0gsQ0FBQztJQUVPLE9BQU8sQ0FBQyxXQUE0QixFQUFFLE1BQXVCO1FBQ25FLE1BQU0sRUFBRSxHQUFHLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ3ZFLE1BQU0sRUFBRSxHQUFHLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ3ZFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDN0UsQ0FBQztDQUNGO0FBeERELHNCQXdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFwcCBmcm9tICcuJztcblxuZXhwb3J0IGNsYXNzIFNlbnNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBpdGVtRGVmYXVsdCA9IG5ldyBhcHAuY29yZS5HbG93RGF0YSgwLCAxMTAsIDIyNSwgMjUsIHRydWUsIGZhbHNlKSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGl0ZW1IaWdobGlnaHQgPSBuZXcgYXBwLmNvcmUuR2xvd0RhdGEoMTM3LCAxMDgsIDY0LCAwLCB0cnVlLCBmYWxzZSksXG4gICAgcHJpdmF0ZSByZWFkb25seSBtYXhpbXVtRGlzdGFuY2UgPSAyMDApIHt9XG5cbiAgcmVzZXRJdGVtcyhfOiBhcHAuY29yZS5QbGF5ZXIsIGl0ZW1zOiBJdGVyYWJsZTxhcHAuY29yZS5JdGVtPikge1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgaWYgKGl0ZW0uaGlnaGxpZ2h0RnVuY3Rpb25CaXRzLnZhbHVlLmlzU2FtZSh0aGlzLml0ZW1IaWdobGlnaHQpKSB7XG4gICAgICAgIGl0ZW0uaGlnaGxpZ2h0RnVuY3Rpb25CaXRzLnZhbHVlID0gdGhpcy5pdGVtRGVmYXVsdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXNldFBsYXllcnMobG9jYWxQbGF5ZXI6IGFwcC5jb3JlLlBsYXllciwgcGxheWVyczogSXRlcmFibGU8YXBwLmNvcmUuUGxheWVyPikge1xuICAgIGZvciAoY29uc3QgcGxheWVyIG9mIHBsYXllcnMpIHtcbiAgICAgIGlmIChwbGF5ZXIuaXNWYWxpZCAmJiAhcGxheWVyLmlzU2FtZVRlYW0obG9jYWxQbGF5ZXIpKSB7XG4gICAgICAgIGlmICh0aGlzLmluUmFuZ2UobG9jYWxQbGF5ZXIsIHBsYXllci5sb2NhbE9yaWdpbikpIHtcbiAgICAgICAgICAvKiBUaGlzIGNvdWxkIGJlIGEgQmxvb2Rob3VuZCBzY2FuISAqL1xuICAgICAgICB9IGVsc2UgaWYgKHBsYXllci5nbG93RW5hYmxlLnZhbHVlID09PSA3KSB7XG4gICAgICAgICAgcGxheWVyLmdsb3dFbmFibGUudmFsdWUgPSAyO1xuICAgICAgICAgIHBsYXllci5nbG93VGhyb3VnaFdhbGxzLnZhbHVlID0gNTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUl0ZW1zKGxvY2FsUGxheWVyOiBhcHAuY29yZS5QbGF5ZXIsIGl0ZW1zOiBJdGVyYWJsZTxhcHAuY29yZS5JdGVtPiwgaXRlbVNldDogU2V0PG51bWJlcj4pIHtcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgIGlmIChpdGVtU2V0LmhhcyhpdGVtLmN1c3RvbVNjcmlwdEludC52YWx1ZSkgJiYgdGhpcy5pblJhbmdlKGxvY2FsUGxheWVyLCBpdGVtLmxvY2FsT3JpZ2luKSkge1xuICAgICAgICBpdGVtLmhpZ2hsaWdodEZ1bmN0aW9uQml0cy52YWx1ZSA9IHRoaXMuaXRlbUhpZ2hsaWdodDtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbS5oaWdobGlnaHRGdW5jdGlvbkJpdHMudmFsdWUuaXNTYW1lKHRoaXMuaXRlbUhpZ2hsaWdodCkpIHtcbiAgICAgICAgaXRlbS5oaWdobGlnaHRGdW5jdGlvbkJpdHMudmFsdWUgPSB0aGlzLml0ZW1EZWZhdWx0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBcbiAgdXBkYXRlUGxheWVycyhsb2NhbFBsYXllcjogYXBwLmNvcmUuUGxheWVyLCBwbGF5ZXJzOiBJdGVyYWJsZTxhcHAuY29yZS5QbGF5ZXI+KSB7XG4gICAgZm9yIChjb25zdCBwbGF5ZXIgb2YgcGxheWVycykge1xuICAgICAgaWYgKHBsYXllci5pc1ZhbGlkICYmICFwbGF5ZXIuaXNTYW1lVGVhbShsb2NhbFBsYXllcikpIHtcbiAgICAgICAgaWYgKHRoaXMuaW5SYW5nZShsb2NhbFBsYXllciwgcGxheWVyLmxvY2FsT3JpZ2luKSkge1xuICAgICAgICAgIHBsYXllci5nbG93RW5hYmxlLnZhbHVlID0gNztcbiAgICAgICAgICBwbGF5ZXIuZ2xvd1Rocm91Z2hXYWxscy52YWx1ZSA9IDI7XG4gICAgICAgIH0gZWxzZSBpZiAocGxheWVyLmdsb3dFbmFibGUudmFsdWUgPT09IDcpIHtcbiAgICAgICAgICBwbGF5ZXIuZ2xvd0VuYWJsZS52YWx1ZSA9IDI7XG4gICAgICAgICAgcGxheWVyLmdsb3dUaHJvdWdoV2FsbHMudmFsdWUgPSA1O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpblJhbmdlKGxvY2FsUGxheWVyOiBhcHAuY29yZS5QbGF5ZXIsIG9yaWdpbjogYXBwLmNvcmUuVmVjdG9yKSB7XG4gICAgY29uc3QgZHggPSAobG9jYWxQbGF5ZXIubG9jYWxPcmlnaW4udmFsdWUueCAtIG9yaWdpbi52YWx1ZS54KSAqIDAuMDI1NDtcbiAgICBjb25zdCBkeSA9IChsb2NhbFBsYXllci5sb2NhbE9yaWdpbi52YWx1ZS55IC0gb3JpZ2luLnZhbHVlLnkpICogMC4wMjU0O1xuICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coZHgsIDIpICsgTWF0aC5wb3coZHksIDIpKSA8IHRoaXMubWF4aW11bURpc3RhbmNlO1xuICB9XG59XG4iXX0=